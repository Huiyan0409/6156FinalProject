{"signature": "def list(<EOL>self, custom_headers=None, raw=False, **operation_config):", "body": "def internal_paging(next_link=None, raw=False):<EOL><INDENT>if not next_link:<EOL><INDENT>url = self.list.metadata['<STR_LIT:url>']<EOL>path_format_arguments = {<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", self.config.subscription_id, '<STR_LIT:str>')<EOL>}<EOL>url = self._client.format_url(url, **path_format_arguments)<EOL>query_parameters = {}<EOL>query_parameters['<STR_LIT>'] = self._serialize.query(\"<STR_LIT>\", self.api_version, '<STR_LIT:str>')<EOL><DEDENT>else:<EOL><INDENT>url = next_link<EOL>query_parameters = {}<EOL><DEDENT>header_parameters = {}<EOL>header_parameters['<STR_LIT>'] = '<STR_LIT:application/json>'<EOL>if self.config.generate_client_request_id:<EOL><INDENT>header_parameters['<STR_LIT>'] = str(uuid.uuid1())<EOL><DEDENT>if custom_headers:<EOL><INDENT>header_parameters.update(custom_headers)<EOL><DEDENT>if self.config.accept_language is not None:<EOL><INDENT>header_parameters['<STR_LIT>'] = self._serialize.header(\"<STR_LIT>\", self.config.accept_language, '<STR_LIT:str>')<EOL><DEDENT>request = self._client.get(url, query_parameters, header_parameters)<EOL>response = self._client.send(request, stream=False, **operation_config)<EOL>if response.status_code not in [<NUM_LIT:200>]:<EOL><INDENT>exp = CloudError(response)<EOL>exp.request_id = response.headers.get('<STR_LIT>')<EOL>raise exp<EOL><DEDENT>return response<EOL><DEDENT>deserialized = models.RouteFilterPaged(internal_paging, self._deserialize.dependencies)<EOL>if raw:<EOL><INDENT>header_dict = {}<EOL>client_raw_response = models.RouteFilterPaged(internal_paging, self._deserialize.dependencies, header_dict)<EOL>return client_raw_response<EOL><DEDENT>return deserialized<EOL>", "docstring": "Gets all route filters in a subscription.\n\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: An iterator like instance of RouteFilter\n        :rtype:\n         ~azure.mgmt.network.v2017_03_01.models.RouteFilterPaged[~azure.mgmt.network.v2017_03_01.models.RouteFilter]\n        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`", "id": "f31198:c0:m9"}
{"signature": "def _get_state(self):", "body": "return self.__state<EOL>", "docstring": "Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/bgp/peer_groups/peer_group/afi_safis/afi_safi/l3vpn_ipv4_unicast/prefix_limit/state (container)\n\n    YANG Description: State information relating to the prefix-limit for the\nAFI-SAFI", "id": "f23226:c1:m5"}
{"signature": "def create_prebuilt_entity_role(<EOL>self, app_id, version_id, entity_id, name=None, custom_headers=None, raw=False, **operation_config):", "body": "entity_role_create_object = models.EntityRoleCreateObject(name=name)<EOL>url = self.create_prebuilt_entity_role.metadata['<STR_LIT:url>']<EOL>path_format_arguments = {<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", self.config.endpoint, '<STR_LIT:str>', skip_quote=True),<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", app_id, '<STR_LIT:str>'),<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", version_id, '<STR_LIT:str>'),<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", entity_id, '<STR_LIT:str>')<EOL>}<EOL>url = self._client.format_url(url, **path_format_arguments)<EOL>query_parameters = {}<EOL>header_parameters = {}<EOL>header_parameters['<STR_LIT>'] = '<STR_LIT:application/json>'<EOL>header_parameters['<STR_LIT:Content-Type>'] = '<STR_LIT>'<EOL>if custom_headers:<EOL><INDENT>header_parameters.update(custom_headers)<EOL><DEDENT>body_content = self._serialize.body(entity_role_create_object, '<STR_LIT>')<EOL>request = self._client.post(url, query_parameters, header_parameters, body_content)<EOL>response = self._client.send(request, stream=False, **operation_config)<EOL>if response.status_code not in [<NUM_LIT>]:<EOL><INDENT>raise models.ErrorResponseException(self._deserialize, response)<EOL><DEDENT>deserialized = None<EOL>if response.status_code == <NUM_LIT>:<EOL><INDENT>deserialized = self._deserialize('<STR_LIT:str>', response)<EOL><DEDENT>if raw:<EOL><INDENT>client_raw_response = ClientRawResponse(deserialized, response)<EOL>return client_raw_response<EOL><DEDENT>return deserialized<EOL>", "docstring": "Create a role for a prebuilt entity in a version of the application.\n\n        :param app_id: The application ID.\n        :type app_id: str\n        :param version_id: The version ID.\n        :type version_id: str\n        :param entity_id: The entity model ID.\n        :type entity_id: str\n        :param name: The entity role name.\n        :type name: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: str or ClientRawResponse if raw=true\n        :rtype: str or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`ErrorResponseException<azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException>`", "id": "f43227:c0:m59"}
{"signature": "def get_learned_routes(<EOL>self, resource_group_name, virtual_network_gateway_name, custom_headers=None, raw=False, polling=True, **operation_config):", "body": "raw_result = self._get_learned_routes_initial(<EOL>resource_group_name=resource_group_name,<EOL>virtual_network_gateway_name=virtual_network_gateway_name,<EOL>custom_headers=custom_headers,<EOL>raw=True,<EOL>**operation_config<EOL>)<EOL>def get_long_running_output(response):<EOL><INDENT>deserialized = self._deserialize('<STR_LIT>', response)<EOL>if raw:<EOL><INDENT>client_raw_response = ClientRawResponse(deserialized, response)<EOL>return client_raw_response<EOL><DEDENT>return deserialized<EOL><DEDENT>lro_delay = operation_config.get(<EOL>'<STR_LIT>',<EOL>self.config.long_running_operation_timeout)<EOL>if polling is True: polling_method = ARMPolling(lro_delay, **operation_config)<EOL>elif polling is False: polling_method = NoPolling()<EOL>else: polling_method = polling<EOL>return LROPoller(self._client, raw_result, get_long_running_output, polling_method)<EOL>", "docstring": "This operation retrieves a list of routes the virtual network gateway\n        has learned, including routes learned from BGP peers.\n\n        :param resource_group_name: The name of the resource group.\n        :type resource_group_name: str\n        :param virtual_network_gateway_name: The name of the virtual network\n         gateway.\n        :type virtual_network_gateway_name: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: The poller return type is ClientRawResponse, the\n         direct response alongside the deserialized response\n        :param polling: True for ARMPolling, False for no polling, or a\n         polling object for personal polling strategy\n        :return: An instance of LROPoller that returns GatewayRouteListResult\n         or ClientRawResponse<GatewayRouteListResult> if raw==True\n        :rtype:\n         ~msrestazure.azure_operation.AzureOperationPoller[~azure.mgmt.network.v2018_07_01.models.GatewayRouteListResult]\n         or\n         ~msrestazure.azure_operation.AzureOperationPoller[~msrest.pipeline.ClientRawResponse[~azure.mgmt.network.v2018_07_01.models.GatewayRouteListResult]]\n        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`", "id": "f34232:c0:m21"}
{"signature": "@classmethod<EOL><INDENT>def class_config_section(cls):<DEDENT>", "body": "def c(s):<EOL><INDENT>\"\"\"<STR_LIT>\"\"\"<EOL>s = '<STR_LIT>'.join(wrap_paragraphs(s, <NUM_LIT>))<EOL>return '<STR_LIT>' + s.replace('<STR_LIT:\\n>', '<STR_LIT>')<EOL><DEDENT>breaker = '<STR_LIT:#>' + '<STR_LIT:->'*<NUM_LIT><EOL>s = \"<STR_LIT>\"%cls.__name__<EOL>lines = [breaker, s, breaker, '<STR_LIT>']<EOL>desc = cls.class_traits().get('<STR_LIT:description>')<EOL>if desc:<EOL><INDENT>desc = desc.default_value<EOL><DEDENT>else:<EOL><INDENT>desc = getattr(cls, '<STR_LIT>', '<STR_LIT>')<EOL><DEDENT>if desc:<EOL><INDENT>lines.append(c(desc))<EOL>lines.append('<STR_LIT>')<EOL><DEDENT>parents = []<EOL>for parent in cls.mro():<EOL><INDENT>if parent is not cls and issubclass(parent, Configurable) andparent.class_traits(config=True):<EOL><INDENT>parents.append(parent)<EOL><DEDENT><DEDENT>if parents:<EOL><INDENT>pstr = '<STR_LIT:U+002CU+0020>'.join([ p.__name__ for p in parents ])<EOL>lines.append(c('<STR_LIT>'%(cls.__name__, pstr)))<EOL>lines.append('<STR_LIT>')<EOL><DEDENT>for name,trait in cls.class_traits(config=True).items():<EOL><INDENT>help = trait.get_metadata('<STR_LIT>') or '<STR_LIT>'<EOL>lines.append(c(help))<EOL>lines.append('<STR_LIT>'%(cls.__name__, name, trait.get_default_value()))<EOL>lines.append('<STR_LIT>')<EOL><DEDENT>return '<STR_LIT:\\n>'.join(lines)<EOL>", "docstring": "Get the config class config section", "id": "f21494:c2:m6"}
{"signature": "def set_option(self, section, option, value):", "body": "raise NotImplementedError<EOL>", "docstring": "Set an option in storage", "id": "f17531:c2:m17"}
{"signature": "def _get_tag(self):", "body": "return self.__tag<EOL>", "docstring": "Getter method for tag, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/ipv6_reachability/prefixes/prefixes/subTLVs/subTLVs/tag (container)\n\nYANG Description: This container defines sub-TLV 1.", "id": "f22661:c0:m8"}
{"signature": "def _set_config(self, v, load=False):", "body": "if hasattr(v, \"<STR_LIT>\"):<EOL><INDENT>v = v._utype(v)<EOL><DEDENT>try:<EOL><INDENT>t = YANGDynClass(<EOL>v,<EOL>base=config.config,<EOL>is_container=\"<STR_LIT>\",<EOL>yang_name=\"<STR_LIT>\",<EOL>parent=self,<EOL>path_helper=self._path_helper,<EOL>extmethods=self._extmethods,<EOL>register_paths=True,<EOL>extensions=None,<EOL>namespace=\"<STR_LIT>\",<EOL>defining_module=\"<STR_LIT>\",<EOL>yang_type=\"<STR_LIT>\",<EOL>is_config=True,<EOL>)<EOL><DEDENT>except (TypeError, ValueError):<EOL><INDENT>raise ValueError(<EOL>{<EOL>\"<STR_LIT>\": \"\"\"<STR_LIT>\"\"\",<EOL>\"<STR_LIT>\": \"<STR_LIT>\",<EOL>\"<STR_LIT>\": \"\"\"<STR_LIT>\"\"\",<EOL>}<EOL>)<EOL><DEDENT>self.__config = t<EOL>if hasattr(self, \"<STR_LIT>\"):<EOL><INDENT>self._set()<EOL><DEDENT>", "docstring": "Setter method for config, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/interfaces/interface/levels/level/afi_safi/af/segment_routing/prefix_sids/prefix_sid/config (container)\nIf this variable is read-only (config: false) in the\nsource YANG file, then _set_config is considered as a private\nmethod. Backends looking to populate this variable should\ndo so via calling thisObj._set_config() directly.\n\nYANG Description: Configuration parameters for the IGP Prefix SID.", "id": "f22450:c0:m6"}
{"signature": "def handle_error(errcode):", "body": "if type(errcode) is c_int:<EOL><INDENT>errcode = errcode.value<EOL><DEDENT>if errcode == <NUM_LIT:0>:<EOL><INDENT>pass  <EOL><DEDENT>elif errcode == -<NUM_LIT:1>:<EOL><INDENT>raise TimeoutError(\"<STR_LIT>\")<EOL><DEDENT>elif errcode == -<NUM_LIT:2>:<EOL><INDENT>raise LostError(\"<STR_LIT>\")<EOL><DEDENT>elif errcode == -<NUM_LIT:3>:<EOL><INDENT>raise InvalidArgumentError(\"<STR_LIT>\")<EOL><DEDENT>elif errcode == -<NUM_LIT:4>:<EOL><INDENT>raise InternalError(\"<STR_LIT>\")<EOL><DEDENT>elif errcode < <NUM_LIT:0>: <EOL><INDENT>raise RuntimeError(\"<STR_LIT>\")<EOL><DEDENT>", "docstring": "Error handler function. Translates an error code into an exception.", "id": "f12888:m8"}
{"signature": "def supported_security_providers(<EOL>self, resource_group_name, virtual_wan_name, custom_headers=None, raw=False, **operation_config):", "body": "api_version = \"<STR_LIT>\"<EOL>url = self.supported_security_providers.metadata['<STR_LIT:url>']<EOL>path_format_arguments = {<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", self.config.subscription_id, '<STR_LIT:str>'),<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", resource_group_name, '<STR_LIT:str>'),<EOL>'<STR_LIT>': self._serialize.url(\"<STR_LIT>\", virtual_wan_name, '<STR_LIT:str>')<EOL>}<EOL>url = self._client.format_url(url, **path_format_arguments)<EOL>query_parameters = {}<EOL>query_parameters['<STR_LIT>'] = self._serialize.query(\"<STR_LIT>\", api_version, '<STR_LIT:str>')<EOL>header_parameters = {}<EOL>header_parameters['<STR_LIT>'] = '<STR_LIT:application/json>'<EOL>if self.config.generate_client_request_id:<EOL><INDENT>header_parameters['<STR_LIT>'] = str(uuid.uuid1())<EOL><DEDENT>if custom_headers:<EOL><INDENT>header_parameters.update(custom_headers)<EOL><DEDENT>if self.config.accept_language is not None:<EOL><INDENT>header_parameters['<STR_LIT>'] = self._serialize.header(\"<STR_LIT>\", self.config.accept_language, '<STR_LIT:str>')<EOL><DEDENT>request = self._client.get(url, query_parameters, header_parameters)<EOL>response = self._client.send(request, stream=False, **operation_config)<EOL>if response.status_code not in [<NUM_LIT:200>]:<EOL><INDENT>raise models.ErrorException(self._deserialize, response)<EOL><DEDENT>deserialized = None<EOL>if response.status_code == <NUM_LIT:200>:<EOL><INDENT>deserialized = self._deserialize('<STR_LIT>', response)<EOL><DEDENT>if raw:<EOL><INDENT>client_raw_response = ClientRawResponse(deserialized, response)<EOL>return client_raw_response<EOL><DEDENT>return deserialized<EOL>", "docstring": "Gives the supported security providers for the virtual wan.\n\n        :param resource_group_name: The resource group name.\n        :type resource_group_name: str\n        :param virtual_wan_name: The name of the VirtualWAN for which\n         supported security providers are needed.\n        :type virtual_wan_name: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: VirtualWanSecurityProviders or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.mgmt.network.v2018_11_01.models.VirtualWanSecurityProviders or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`ErrorException<azure.mgmt.network.v2018_11_01.models.ErrorException>`", "id": "f32312:c1:m2"}