{"signature": "def _get_host(self, request):", "body": "parsed = urlparse(request.url)<EOL>return parsed.netloc<EOL>", "docstring": "Pull the Host out of the request", "id": "f299127:c0:m3"}
{"signature": "def obfn_dfd(self):", "body": "Ef = self.eval_Rf(self.Xf)<EOL>return sl.rfl2norm2(Ef, self.S.shape, axis=self.cri.axisN) / <NUM_LIT><EOL>", "docstring": "r\"\"\"Compute data fidelity term :math:`(1/2) \\| \\sum_m\n        \\mathbf{d}_m * \\mathbf{x}_m - \\mathbf{s} \\|_2^2`.", "id": "f28055:c0:m8"}
{"signature": "def identtuple(self):", "body": "return (self._table_name, self.sys_id)<EOL>", "docstring": "identity for graph node/vertex purposes", "id": "f80007:c0:m4"}
{"signature": "def emit_save_figure(self):", "body": "self.sig_save_figure.emit(self.canvas.fig, self.canvas.fmt)<EOL>", "docstring": "Emit a signal when the toolbutton to save the figure is clicked.", "id": "f43527:c3:m5"}
{"signature": "def get_exclusions(self):", "body": "all_packages = (<EOL>pkg<EOL>for ns_pkg in self._get_SVEM_NSPs()<EOL>for pkg in self._all_packages(ns_pkg)<EOL>)<EOL>excl_specs = product(all_packages, self._gen_exclusion_paths())<EOL>return set(starmap(self._exclude_pkg_path, excl_specs))<EOL>", "docstring": "Return a collections.Sized collections.Container of paths to be\nexcluded for single_version_externally_managed installations.", "id": "f189490:c0:m1"}
{"signature": "def _get_syslog_secure(self):", "body": "return self.__syslog_secure<EOL>", "docstring": "Getter method for syslog_secure, mapped from YANG variable /logging/syslog_server/syslog_secure (container)", "id": "f332822:c0:m9"}
{"signature": "def get(self, request, bot_id, format=None):", "body": "return super(EnvironmentVarList, self).get(request, bot_id, format)<EOL>", "docstring": "Get list of environment variables\n---\nserializer: EnvironmentVarSerializer\nresponseMessages:\n    - code: 401\n      message: Not authenticated", "id": "f170650:c0:m2"}
{"signature": "@property<EOL><INDENT>def url(self):<DEDENT>", "body": "return self._url<EOL>", "docstring": "the unique locator for the page.", "id": "f233155:c2:m7"}
{"signature": "def set_file_filters(self, file_filters):", "body": "file_filters = util.return_list(file_filters)<EOL>self.file_filters = file_filters<EOL>", "docstring": "Sets internal file filters to `file_filters` by tossing old state.\n`file_filters` can be single object or iterable.", "id": "f193767:c0:m6"}